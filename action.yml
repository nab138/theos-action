name: 'Setup Theos'
description: 'Install Theos and prepare it for building projects'
author: 'beerpsi'
inputs:
  theos-dir:
    description: 'Where to install Theos'
    required: false
    default: ${{ github.workspace }}/theos
  theos-src:
    description: 'Where to clone Theos itself from (git URL)'
    required: false
    default: 'https://github.com/theos/theos'
  theos-ref:
    description: 'The branch, tag or SHA to clone Theos from'
    required: false
    default: master
  theos-sdks:
    description: 'Where to clone the iOS SDKs from (git URL)'
    required: false
    default: 'https://github.com/theos/sdks'
  theos-sdks-ref:
    description: 'The branch, tag or SHA to get Theos sdks from'
    required: false
    default: master
  cache:
    description: 'Cache Theos installation for faster installation'
    required: false
    default: true
  cache-dir-theos:
    description: 'Cache location for Theos'
    required: false
    default: /usr/local/opt/__theos_cache
  cache-dir-sdks:
    description: 'Cache location for SDKs'
    required: false
    default: /usr/local/opt/__theos_sdks_cache
runs:
  using: "composite"
  steps:
    - id: information
      shell: bash
      run: |
        echo "::set-output name=theos::`if [ ${{ inputs.theos-ref }} = "master" ]; then \
            git ls-remote https://github.com/theos/theos | head -n 1 | cut -f 1; \
          else \
            echo ${{ inputs.theos-ref }}; \
          fi`"
        echo "::set-output name=theos-sdks::`if [ ${{ inputs.theos-sdks-ref }} = "master" ]; then \
            git ls-remote https://github.com/theos/sdks | head -n 1 | cut -f 1; \
          else \
            echo ${{ inputs.theos-sdks-ref }}; \
          fi`"
        echo "::set-output name=theos-dir-basename::`basename ${{ inputs.theos-dir }}`"
        
    - uses: actions/cache@v3
      id: theos-cache
      if: inputs.cache == 'true'
      with:
        path: ${{ inputs.cache-dir-theos }}
        key: ${{ runner.os }}-${{ steps.information.outputs.theos }}-theos2
        
    - name: Install Theos dependencies
      shell: bash
      if: runner.os == 'macOS'
      run: |
        brew install ldid make
        echo "/usr/local/opt/make/libexec/gnubin" >> $GITHUB_PATH
    
    - name: prepare environment
      shell: bash
      run: |
        echo "THEOS=${{ inputs.theos-dir }}" >> $GITHUB_ENV

    - name: get theos (uncached)
      if: inputs.cache != 'true' || steps.theos-cache.outputs.cache-hit != 'true'
      shell: bash
      run: |
        rm -rf ${{ inputs.theos-dir }}
        git clone --recursive ${{ inputs.theos-src }} ${{ inputs.theos-dir }}
        cd ${{ inputs.theos-dir }}
        git -C ${{ inputs.theos-dir }} checkout ${{ inputs.theos-ref }}
    
    - name: get toolchain on linux
      if: runner.os == 'Linux' && (inputs.cache != 'true' || steps.theos-cache.outputs.cache-hit != 'true')
      shell: bash
      run: |
        . /etc/lsb-release
        mkdir -p ${{ inputs.theos-dir }}/toolchain/linux/iphone ${{ inputs.theos-dir }}/toolchain/swift
        curl -sL https://github.com/kabiroberai/swift-toolchain-linux/releases/download/v2.3.0/swift-5.8-ubuntu${DISTRIB_RELEASE}.tar.xz \
          | tar -xJf - -C ${{ inputs.theos-dir }}/toolchain
        ln -s ${{ inputs.theos-dir }}/toolchain/linux/iphone ${{ inputs.theos-dir }}/toolchain/swift

    - name: restore theos from cache
      if: inputs.cache == 'true' && steps.theos-cache.outputs.cache-hit == 'true' && inputs.cache-dir-theos != inputs.theos-dir
      shell: bash
      run: |
        sudo rsync -aWlHh --inplace ${{ inputs.cache-dir-theos }}/${{ steps.information.outputs.theos-dir-basename }}/ ${{ inputs.theos-dir }}
    
    - name: cache theos
      if: inputs.cache == 'true' && steps.theos-cache.outputs.cache-hit != 'true' && inputs.cache-dir-theos != inputs.theos-dir
      shell: bash
      run: |
        sudo rsync -alHh --inplace ${{ inputs.theos-dir }} ${{ inputs.cache-dir-theos }}/
    
    - uses: actions/cache@v3
      id: theos-sdks-cache
      if: inputs.cache == 'true'
      with:
        path: ${{ inputs.cache-dir-sdks }}
        key: ${{ runner.os }}-${{ steps.information.outputs.theos-sdks }}-theos

    - name: get sdks (uncached)
      if: inputs.cache != 'true' || steps.theos-sdks-cache.outputs.cache-hit != 'true'
      shell: bash
      run: |
        rm -rf ${{ inputs.theos-dir }}/sdks/* 
        curl -sL ${{ inputs.theos-sdks }}/archive/${{ inputs.theos-sdks-ref }}.tar.gz | tar -xzf - --strip-components=1 -C ${{ inputs.theos-dir }}/sdks
    
    - name: restore theos sdks from cache
      if: inputs.cache == 'true' && steps.theos-sdks-cache.outputs.cache-hit == 'true' && inputs.cache-dir-sdks != format('{0}/{1}', inputs.theos-dir, 'sdks')
      shell: bash
      run: |
        sudo rsync -aWlHh --inplace ${{ inputs.cache-dir-sdks }}/sdks ${{ inputs.theos-dir }}
   
    - name: cache sdks
      if: inputs.cache == 'true' && steps.theos-sdks-cache.outputs.cache-hit != 'true' && inputs.cache-dir-sdks != format('{0}/{1}', inputs.theos-dir, 'sdks')
      shell: bash
      run: | 
        sudo rsync -alHh --inplace ${{ inputs.theos-dir }}/sdks ${{ inputs.cache-dir-sdks }}/
    

branding:
  icon: download-cloud
  color: purple
